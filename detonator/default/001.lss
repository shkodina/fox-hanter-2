
001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000478  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800074  00800074  00000520  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00000c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00000cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007d9  00000000  00000000  00000e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003fb  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000055a  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00001fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030c  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000029f  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000103  00000000  00000000  00002663  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setupTIMER2>:

//----------------------------------------------------------------

void setupTIMER2 (void)
{
	TIMSK &=~(1<<OCIE2 | 1<< TOIE2);	
  92:	89 b7       	in	r24, 0x39	; 57
  94:	8f 73       	andi	r24, 0x3F	; 63
  96:	89 bf       	out	0x39, r24	; 57
	ASSR  = 1<<AS2;				
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	82 bd       	out	0x22, r24	; 34
	TCNT2 = 0;
  9c:	14 bc       	out	0x24, r1	; 36
	TCCR2 = 5<<CS20; 
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	85 bd       	out	0x25, r24	; 37
	TIMSK |= 1<< TOIE2;
  a2:	89 b7       	in	r24, 0x39	; 57
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	89 bf       	out	0x39, r24	; 57
}
  a8:	08 95       	ret

000000aa <__vector_4>:

//---------------------------------------------------------------

ISR (TIMER2_OVF_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
 cli();
  b8:	f8 94       	cli
	INVBIT(LEDPORT, LEDPIN) ;
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	90 e2       	ldi	r25, 0x20	; 32
  be:	89 27       	eor	r24, r25
  c0:	8b bb       	out	0x1b, r24	; 27
 sei();
  c2:	78 94       	sei
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <main>:
volatile Timer g_timer;


int main(){
	
	LEDDDRPORT |= 1 << LEDPIN;
  d2:	d5 9a       	sbi	0x1a, 5	; 26


	setTimer(&g_timer, 12, 34, 56);
  d4:	84 e7       	ldi	r24, 0x74	; 116
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	6c e0       	ldi	r22, 0x0C	; 12
  da:	42 e2       	ldi	r20, 0x22	; 34
  dc:	28 e3       	ldi	r18, 0x38	; 56
  de:	0e 94 7b 00 	call	0xf6	; 0xf6 <setTimer>

	initSevenSegPort();
  e2:	0e 94 1f 01 	call	0x23e	; 0x23e <initSevenSegPort>


	setupTIMER2();
  e6:	0e 94 49 00 	call	0x92	; 0x92 <setupTIMER2>
	sei();
  ea:	78 94       	sei
	while (1) {
//		for (char i = 0; i < 6; i++)
//			sevenSegShowCode(i, 0b11110110 );
//			for (char ii = 0; ii < 8; ii++)
//				sevenSegShowCode(i, 1 << ii );
	sevenSegShowGTimerTime(&g_timer);
  ec:	84 e7       	ldi	r24, 0x74	; 116
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <sevenSegShowGTimerTime>
  f4:	fb cf       	rjmp	.-10     	; 0xec <main+0x1a>

000000f6 <setTimer>:
#include "timer.h"

void setTimer(Timer * g_timer, char hh, char mm, char ss){
  f6:	fc 01       	movw	r30, r24
	g_timer->time[SS] = g_timer->time_init[SS] = ss;
  f8:	25 83       	std	Z+5, r18	; 0x05
  fa:	22 83       	std	Z+2, r18	; 0x02
	g_timer->time[MM] = g_timer->time_init[MM] = mm;
  fc:	44 83       	std	Z+4, r20	; 0x04
  fe:	41 83       	std	Z+1, r20	; 0x01
	g_timer->time[HH] = g_timer->time_init[HH] = hh;
 100:	63 83       	std	Z+3, r22	; 0x03
 102:	60 83       	st	Z, r22
	g_timer->full_time_in_seconds = hh * HHCOEF + mm * MMCOEF + ss;
 104:	8c e3       	ldi	r24, 0x3C	; 60
 106:	48 9f       	mul	r20, r24
 108:	a0 01       	movw	r20, r0
 10a:	11 24       	eor	r1, r1
 10c:	42 0f       	add	r20, r18
 10e:	51 1d       	adc	r21, r1
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	20 e1       	ldi	r18, 0x10	; 16
 114:	3e e0       	ldi	r19, 0x0E	; 14
 116:	62 9f       	mul	r22, r18
 118:	c0 01       	movw	r24, r0
 11a:	63 9f       	mul	r22, r19
 11c:	90 0d       	add	r25, r0
 11e:	72 9f       	mul	r23, r18
 120:	90 0d       	add	r25, r0
 122:	11 24       	eor	r1, r1
 124:	48 0f       	add	r20, r24
 126:	59 1f       	adc	r21, r25
 128:	66 27       	eor	r22, r22
 12a:	57 fd       	sbrc	r21, 7
 12c:	60 95       	com	r22
 12e:	76 2f       	mov	r23, r22
 130:	46 83       	std	Z+6, r20	; 0x06
 132:	57 83       	std	Z+7, r21	; 0x07
 134:	60 87       	std	Z+8, r22	; 0x08
 136:	71 87       	std	Z+9, r23	; 0x09
	g_timer->state = OFF;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	82 87       	std	Z+10, r24	; 0x0a
}
 13c:	08 95       	ret

0000013e <decTimer>:

unsigned long decTimer(Timer * g_timer){
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
	g_timer->full_time_in_seconds--;
 156:	ee 80       	ldd	r14, Y+6	; 0x06
 158:	ff 80       	ldd	r15, Y+7	; 0x07
 15a:	08 85       	ldd	r16, Y+8	; 0x08
 15c:	19 85       	ldd	r17, Y+9	; 0x09
 15e:	08 94       	sec
 160:	e1 08       	sbc	r14, r1
 162:	f1 08       	sbc	r15, r1
 164:	01 09       	sbc	r16, r1
 166:	11 09       	sbc	r17, r1
 168:	ee 82       	std	Y+6, r14	; 0x06
 16a:	ff 82       	std	Y+7, r15	; 0x07
 16c:	08 87       	std	Y+8, r16	; 0x08
 16e:	19 87       	std	Y+9, r17	; 0x09
	g_timer->time[HH] = g_timer->full_time_in_seconds / HHCOEF;
 170:	c8 01       	movw	r24, r16
 172:	b7 01       	movw	r22, r14
 174:	20 e1       	ldi	r18, 0x10	; 16
 176:	3e e0       	ldi	r19, 0x0E	; 14
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	0e 94 18 02 	call	0x430	; 0x430 <__udivmodsi4>
 180:	d2 2e       	mov	r13, r18
 182:	28 83       	st	Y, r18
	g_timer->time[SS] = g_timer->full_time_in_seconds % MMCOEF;
 184:	8c e3       	ldi	r24, 0x3C	; 60
 186:	88 2e       	mov	r8, r24
 188:	91 2c       	mov	r9, r1
 18a:	a1 2c       	mov	r10, r1
 18c:	b1 2c       	mov	r11, r1
 18e:	c8 01       	movw	r24, r16
 190:	b7 01       	movw	r22, r14
 192:	a5 01       	movw	r20, r10
 194:	94 01       	movw	r18, r8
 196:	0e 94 18 02 	call	0x430	; 0x430 <__udivmodsi4>
 19a:	6a 83       	std	Y+2, r22	; 0x02
	g_timer->time[MM] = ( g_timer->full_time_in_seconds - g_timer->time[HH] * HHCOEF ) / MMCOEF;
 19c:	4d 2d       	mov	r20, r13
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	20 e1       	ldi	r18, 0x10	; 16
 1a2:	3e e0       	ldi	r19, 0x0E	; 14
 1a4:	42 9f       	mul	r20, r18
 1a6:	c0 01       	movw	r24, r0
 1a8:	43 9f       	mul	r20, r19
 1aa:	90 0d       	add	r25, r0
 1ac:	52 9f       	mul	r21, r18
 1ae:	90 0d       	add	r25, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	aa 27       	eor	r26, r26
 1b4:	97 fd       	sbrc	r25, 7
 1b6:	a0 95       	com	r26
 1b8:	ba 2f       	mov	r27, r26
 1ba:	a8 01       	movw	r20, r16
 1bc:	97 01       	movw	r18, r14
 1be:	28 1b       	sub	r18, r24
 1c0:	39 0b       	sbc	r19, r25
 1c2:	4a 0b       	sbc	r20, r26
 1c4:	5b 0b       	sbc	r21, r27
 1c6:	ca 01       	movw	r24, r20
 1c8:	b9 01       	movw	r22, r18
 1ca:	a5 01       	movw	r20, r10
 1cc:	94 01       	movw	r18, r8
 1ce:	0e 94 18 02 	call	0x430	; 0x430 <__udivmodsi4>
 1d2:	29 83       	std	Y+1, r18	; 0x01
	return g_timer->full_time_in_seconds;
}
 1d4:	b7 01       	movw	r22, r14
 1d6:	c8 01       	movw	r24, r16
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	bf 90       	pop	r11
 1e8:	af 90       	pop	r10
 1ea:	9f 90       	pop	r9
 1ec:	8f 90       	pop	r8
 1ee:	08 95       	ret

000001f0 <resetTimer>:

void resetTimer(Timer * g_timer){
 1f0:	fc 01       	movw	r30, r24
	setTimer(g_timer, g_timer->time_init[HH], g_timer->time_init[MM], g_timer->time_init[SS]);
 1f2:	63 81       	ldd	r22, Z+3	; 0x03
 1f4:	84 81       	ldd	r24, Z+4	; 0x04
 1f6:	a5 81       	ldd	r26, Z+5	; 0x05
#include "timer.h"

void setTimer(Timer * g_timer, char hh, char mm, char ss){
	g_timer->time[SS] = g_timer->time_init[SS] = ss;
 1f8:	a2 83       	std	Z+2, r26	; 0x02
	g_timer->time[MM] = g_timer->time_init[MM] = mm;
 1fa:	81 83       	std	Z+1, r24	; 0x01
	g_timer->time[HH] = g_timer->time_init[HH] = hh;
 1fc:	60 83       	st	Z, r22
	g_timer->full_time_in_seconds = hh * HHCOEF + mm * MMCOEF + ss;
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	40 e1       	ldi	r20, 0x10	; 16
 202:	5e e0       	ldi	r21, 0x0E	; 14
 204:	64 9f       	mul	r22, r20
 206:	90 01       	movw	r18, r0
 208:	65 9f       	mul	r22, r21
 20a:	30 0d       	add	r19, r0
 20c:	74 9f       	mul	r23, r20
 20e:	30 0d       	add	r19, r0
 210:	11 24       	eor	r1, r1
 212:	9c e3       	ldi	r25, 0x3C	; 60
 214:	89 9f       	mul	r24, r25
 216:	c0 01       	movw	r24, r0
 218:	11 24       	eor	r1, r1
 21a:	28 0f       	add	r18, r24
 21c:	39 1f       	adc	r19, r25
 21e:	2a 0f       	add	r18, r26
 220:	31 1d       	adc	r19, r1
 222:	44 27       	eor	r20, r20
 224:	37 fd       	sbrc	r19, 7
 226:	40 95       	com	r20
 228:	54 2f       	mov	r21, r20
 22a:	26 83       	std	Z+6, r18	; 0x06
 22c:	37 83       	std	Z+7, r19	; 0x07
 22e:	40 87       	std	Z+8, r20	; 0x08
 230:	51 87       	std	Z+9, r21	; 0x09
	g_timer->state = OFF;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	82 87       	std	Z+10, r24	; 0x0a
	return g_timer->full_time_in_seconds;
}

void resetTimer(Timer * g_timer){
	setTimer(g_timer, g_timer->time_init[HH], g_timer->time_init[MM], g_timer->time_init[SS]);
}
 236:	08 95       	ret

00000238 <startTimer>:

void startTimer(Timer * g_timer){
	g_timer->state = ON;
 238:	fc 01       	movw	r30, r24
 23a:	12 86       	std	Z+10, r1	; 0x0a
}
 23c:	08 95       	ret

0000023e <initSevenSegPort>:
//*************************************************************************

void initSevenSegPort(){

	// enable port and turn off leds on port
	SEVENSEGCONFIGPORT = 0xFF;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	81 bb       	out	0x11, r24	; 17
	SEVENSEGPORT = 0x00;
 242:	12 ba       	out	0x12, r1	; 18
 244:	e0 e6       	ldi	r30, 0x60	; 96
 246:	f0 e0       	ldi	r31, 0x00	; 0
	
	// enable port and turn off modules on port
	for (char i = 0; i < SEVENSEGCOUNT; i++){
		UPBIT(ENABLESEVENSEGCONFIGPORT, SevenSegSwichingAr[i]);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	44 b3       	in	r20, 0x14	; 20
enum Sleeps {SLEEPINSEVENSEG = 50, SLEEPINBLINK = 500};
enum InBlinkState {BLINKOFF = 0x0F, BLINKON = 0xF0};

//*************************************************************************

void initSevenSegPort(){
 24e:	df 01       	movw	r26, r30
	SEVENSEGCONFIGPORT = 0xFF;
	SEVENSEGPORT = 0x00;
	
	// enable port and turn off modules on port
	for (char i = 0; i < SEVENSEGCOUNT; i++){
		UPBIT(ENABLESEVENSEGCONFIGPORT, SevenSegSwichingAr[i]);
 250:	9c 01       	movw	r18, r24
 252:	01 90       	ld	r0, Z+
 254:	02 c0       	rjmp	.+4      	; 0x25a <initSevenSegPort+0x1c>
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <initSevenSegPort+0x18>
 25e:	42 2b       	or	r20, r18
 260:	44 bb       	out	0x14, r20	; 20
		DOWNBIT(ENABLESEVENSEGPORT, SevenSegSwichingAr[i]);
 262:	45 b3       	in	r20, 0x15	; 21
 264:	9c 01       	movw	r18, r24
 266:	0c 90       	ld	r0, X
 268:	02 c0       	rjmp	.+4      	; 0x26e <initSevenSegPort+0x30>
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <initSevenSegPort+0x2c>
 272:	20 95       	com	r18
 274:	24 23       	and	r18, r20
 276:	25 bb       	out	0x15, r18	; 21
	// enable port and turn off leds on port
	SEVENSEGCONFIGPORT = 0xFF;
	SEVENSEGPORT = 0x00;
	
	// enable port and turn off modules on port
	for (char i = 0; i < SEVENSEGCOUNT; i++){
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	e6 36       	cpi	r30, 0x66	; 102
 27c:	f2 07       	cpc	r31, r18
 27e:	31 f7       	brne	.-52     	; 0x24c <initSevenSegPort+0xe>
	}


//	DDRC = 0x3f;
//	DDRD = 0xff;
}
 280:	08 95       	ret

00000282 <sevenSegShowCode>:

//*************************************************************************

void sevenSegShowCode(char number, char code ){
	SEVENSEGPORT = code;
 282:	62 bb       	out	0x12, r22	; 18
	UPBIT(ENABLESEVENSEGPORT, number);
 284:	95 b3       	in	r25, 0x15	; 21
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <sevenSegShowCode+0xe>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <sevenSegShowCode+0xa>
 294:	92 2b       	or	r25, r18
 296:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	80 e1       	ldi	r24, 0x10	; 16
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <sevenSegShowCode+0x18>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <sevenSegShowCode+0x1e>
	_delay_us(SLEEPINSEVENSEG);
	DOWNBIT(ENABLESEVENSEGPORT, number);
 2a0:	85 b3       	in	r24, 0x15	; 21
 2a2:	20 95       	com	r18
 2a4:	28 23       	and	r18, r24
 2a6:	25 bb       	out	0x15, r18	; 21
}
 2a8:	08 95       	ret

000002aa <sevenSegShowDigit>:

//*************************************************************************

void sevenSegShowDigit(char * digits, char len, char point_mask, char blink_mask){
 2aa:	7f 92       	push	r7
 2ac:	8f 92       	push	r8
 2ae:	9f 92       	push	r9
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	76 2e       	mov	r7, r22
	static char in_blink_state = BLINKON;
	static int times_for_switch = SLEEPINBLINK / SLEEPINSEVENSEG;
	for (char i = 0; i < len; i++){
 2c6:	30 e6       	ldi	r19, 0x60	; 96
 2c8:	e3 2e       	mov	r14, r19
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f3 2e       	mov	r15, r19
 2ce:	08 2f       	mov	r16, r24
 2d0:	19 2f       	mov	r17, r25
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	d0 e0       	ldi	r29, 0x00	; 0

		char code = (point_mask & (1 << i))	? (SevenSegCodes[digits[i]] | POINT) : SevenSegCodes[digits[i]] ;
 2d6:	c4 2e       	mov	r12, r20
 2d8:	dd 24       	eor	r13, r13
		code = ((blink_mask & (1 << i)) && (in_blink_state == BLINKOFF)) ? NOCODE : code;
 2da:	a2 2e       	mov	r10, r18
 2dc:	bb 24       	eor	r11, r11
		
		if  (!(--times_for_switch)){
			times_for_switch = SLEEPINBLINK / SLEEPINSEVENSEG;
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	88 2e       	mov	r8, r24
 2e2:	91 2c       	mov	r9, r1
//*************************************************************************

void sevenSegShowDigit(char * digits, char len, char point_mask, char blink_mask){
	static char in_blink_state = BLINKON;
	static int times_for_switch = SLEEPINBLINK / SLEEPINSEVENSEG;
	for (char i = 0; i < len; i++){
 2e4:	41 c0       	rjmp	.+130    	; 0x368 <sevenSegShowDigit+0xbe>
 2e6:	8c 2f       	mov	r24, r28

		char code = (point_mask & (1 << i))	? (SevenSegCodes[digits[i]] | POINT) : SevenSegCodes[digits[i]] ;
 2e8:	96 01       	movw	r18, r12
 2ea:	0c 2e       	mov	r0, r28
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <sevenSegShowDigit+0x48>
 2ee:	35 95       	asr	r19
 2f0:	27 95       	ror	r18
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <sevenSegShowDigit+0x44>
 2f6:	d8 01       	movw	r26, r16
 2f8:	ec 91       	ld	r30, X
 2fa:	20 ff       	sbrs	r18, 0
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <sevenSegShowDigit+0x60>
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ea 59       	subi	r30, 0x9A	; 154
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	60 81       	ld	r22, Z
 306:	61 60       	ori	r22, 0x01	; 1
 308:	04 c0       	rjmp	.+8      	; 0x312 <sevenSegShowDigit+0x68>
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ea 59       	subi	r30, 0x9A	; 154
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	60 81       	ld	r22, Z
		code = ((blink_mask & (1 << i)) && (in_blink_state == BLINKOFF)) ? NOCODE : code;
 312:	f5 01       	movw	r30, r10
 314:	02 c0       	rjmp	.+4      	; 0x31a <sevenSegShowDigit+0x70>
 316:	f5 95       	asr	r31
 318:	e7 95       	ror	r30
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <sevenSegShowDigit+0x6c>
 31e:	e0 ff       	sbrs	r30, 0
 320:	05 c0       	rjmp	.+10     	; 0x32c <sevenSegShowDigit+0x82>
 322:	80 91 72 00 	lds	r24, 0x0072
 326:	8f 30       	cpi	r24, 0x0F	; 15
 328:	09 f4       	brne	.+2      	; 0x32c <sevenSegShowDigit+0x82>
 32a:	60 e0       	ldi	r22, 0x00	; 0
		
		if  (!(--times_for_switch)){
 32c:	80 91 70 00 	lds	r24, 0x0070
 330:	90 91 71 00 	lds	r25, 0x0071
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	90 93 71 00 	sts	0x0071, r25
 33a:	80 93 70 00 	sts	0x0070, r24
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	59 f4       	brne	.+22     	; 0x358 <sevenSegShowDigit+0xae>
			times_for_switch = SLEEPINBLINK / SLEEPINSEVENSEG;
 342:	90 92 71 00 	sts	0x0071, r9
 346:	80 92 70 00 	sts	0x0070, r8
			in_blink_state = !in_blink_state;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 91 72 00 	lds	r25, 0x0072
 350:	91 11       	cpse	r25, r1
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	80 93 72 00 	sts	0x0072, r24
		}
		
		sevenSegShowCode(SevenSegSwichingAr[i], code);
 358:	d7 01       	movw	r26, r14
 35a:	8d 91       	ld	r24, X+
 35c:	7d 01       	movw	r14, r26
 35e:	0e 94 41 01 	call	0x282	; 0x282 <sevenSegShowCode>
 362:	21 96       	adiw	r28, 0x01	; 1
 364:	0f 5f       	subi	r16, 0xFF	; 255
 366:	1f 4f       	sbci	r17, 0xFF	; 255
//*************************************************************************

void sevenSegShowDigit(char * digits, char len, char point_mask, char blink_mask){
	static char in_blink_state = BLINKON;
	static int times_for_switch = SLEEPINBLINK / SLEEPINSEVENSEG;
	for (char i = 0; i < len; i++){
 368:	c7 15       	cp	r28, r7
 36a:	08 f4       	brcc	.+2      	; 0x36e <sevenSegShowDigit+0xc4>
 36c:	bc cf       	rjmp	.-136    	; 0x2e6 <sevenSegShowDigit+0x3c>
			in_blink_state = !in_blink_state;
		}
		
		sevenSegShowCode(SevenSegSwichingAr[i], code);
	}
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	bf 90       	pop	r11
 380:	af 90       	pop	r10
 382:	9f 90       	pop	r9
 384:	8f 90       	pop	r8
 386:	7f 90       	pop	r7
 388:	08 95       	ret

0000038a <sevenSegShowGTimer>:

//*************************************************************************

void sevenSegShowGTimer(char * g_timer_time, char len, char blink_mask){
 38a:	df 93       	push	r29
 38c:	cf 93       	push	r28
 38e:	00 d0       	rcall	.+0      	; 0x390 <sevenSegShowGTimer+0x6>
 390:	00 d0       	rcall	.+0      	; 0x392 <sevenSegShowGTimer+0x8>
 392:	00 d0       	rcall	.+0      	; 0x394 <sevenSegShowGTimer+0xa>
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	fc 01       	movw	r30, r24
 39a:	24 2f       	mov	r18, r20
	#define TIMEARRAYLEN 6 // TIMEPOSITIONSCOUNT * 2
	char point_mask = 0b0001010; // h h. m m. s s in revert order
	char time[TIMEARRAYLEN]; // 
	for (char i = 0; i < TIMEPOSITIONSCOUNT; i++){
		time[(i * 2)] = g_timer_time[i] / 10;
 39c:	80 81       	ld	r24, Z
 39e:	3a e0       	ldi	r19, 0x0A	; 10
 3a0:	63 2f       	mov	r22, r19
 3a2:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodqi4>
 3a6:	89 83       	std	Y+1, r24	; 0x01
		time[(i * 2) + 1] = g_timer_time[i] % 10;
 3a8:	9a 83       	std	Y+2, r25	; 0x02
void sevenSegShowGTimer(char * g_timer_time, char len, char blink_mask){
	#define TIMEARRAYLEN 6 // TIMEPOSITIONSCOUNT * 2
	char point_mask = 0b0001010; // h h. m m. s s in revert order
	char time[TIMEARRAYLEN]; // 
	for (char i = 0; i < TIMEPOSITIONSCOUNT; i++){
		time[(i * 2)] = g_timer_time[i] / 10;
 3aa:	81 81       	ldd	r24, Z+1	; 0x01
 3ac:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodqi4>
 3b0:	8b 83       	std	Y+3, r24	; 0x03
		time[(i * 2) + 1] = g_timer_time[i] % 10;
 3b2:	9c 83       	std	Y+4, r25	; 0x04
void sevenSegShowGTimer(char * g_timer_time, char len, char blink_mask){
	#define TIMEARRAYLEN 6 // TIMEPOSITIONSCOUNT * 2
	char point_mask = 0b0001010; // h h. m m. s s in revert order
	char time[TIMEARRAYLEN]; // 
	for (char i = 0; i < TIMEPOSITIONSCOUNT; i++){
		time[(i * 2)] = g_timer_time[i] / 10;
 3b4:	82 81       	ldd	r24, Z+2	; 0x02
 3b6:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodqi4>
 3ba:	8d 83       	std	Y+5, r24	; 0x05
		time[(i * 2) + 1] = g_timer_time[i] % 10;
 3bc:	9e 83       	std	Y+6, r25	; 0x06
	}
	sevenSegShowDigit(time, TIMEARRAYLEN, point_mask, blink_mask);
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	66 e0       	ldi	r22, 0x06	; 6
 3c4:	4a e0       	ldi	r20, 0x0A	; 10
 3c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <sevenSegShowDigit>
}
 3ca:	26 96       	adiw	r28, 0x06	; 6
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	cf 91       	pop	r28
 3d8:	df 91       	pop	r29
 3da:	08 95       	ret

000003dc <sevenSegShowGTimerTime>:

//*************************************************************************

void sevenSegShowGTimerTime (Timer * g_timer){
	char blink_mask = 0b00000000; // no blink
	sevenSegShowGTimer(g_timer->time, TIMEPOSITIONSCOUNT, blink_mask);
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	0e 94 c5 01 	call	0x38a	; 0x38a <sevenSegShowGTimer>
}
 3e4:	08 95       	ret

000003e6 <sevenSegShowGTimerInit>:

//*************************************************************************

void sevenSegShowGTimerInit (Timer * g_timer, char blink_pos){
	char blink_mask = 0b00000000; 
	blink_mask |= (1 << (blink_pos * 2));
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	a9 01       	movw	r20, r18
 3f2:	06 2e       	mov	r0, r22
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <sevenSegShowGTimerInit+0x14>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <sevenSegShowGTimerInit+0x10>
	blink_mask |= (1 << (blink_pos * 2 + 1));
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	02 c0       	rjmp	.+4      	; 0x408 <sevenSegShowGTimerInit+0x22>
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <sevenSegShowGTimerInit+0x1e>
 40c:	42 2b       	or	r20, r18
	sevenSegShowGTimer(g_timer->time_init, TIMEPOSITIONSCOUNT, blink_mask);
 40e:	03 96       	adiw	r24, 0x03	; 3
 410:	63 e0       	ldi	r22, 0x03	; 3
 412:	0e 94 c5 01 	call	0x38a	; 0x38a <sevenSegShowGTimer>
}
 416:	08 95       	ret

00000418 <__udivmodqi4>:
 418:	99 1b       	sub	r25, r25
 41a:	79 e0       	ldi	r23, 0x09	; 9
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__udivmodqi4_ep>

0000041e <__udivmodqi4_loop>:
 41e:	99 1f       	adc	r25, r25
 420:	96 17       	cp	r25, r22
 422:	08 f0       	brcs	.+2      	; 0x426 <__udivmodqi4_ep>
 424:	96 1b       	sub	r25, r22

00000426 <__udivmodqi4_ep>:
 426:	88 1f       	adc	r24, r24
 428:	7a 95       	dec	r23
 42a:	c9 f7       	brne	.-14     	; 0x41e <__udivmodqi4_loop>
 42c:	80 95       	com	r24
 42e:	08 95       	ret

00000430 <__udivmodsi4>:
 430:	a1 e2       	ldi	r26, 0x21	; 33
 432:	1a 2e       	mov	r1, r26
 434:	aa 1b       	sub	r26, r26
 436:	bb 1b       	sub	r27, r27
 438:	fd 01       	movw	r30, r26
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__udivmodsi4_ep>

0000043c <__udivmodsi4_loop>:
 43c:	aa 1f       	adc	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	ee 1f       	adc	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	a2 17       	cp	r26, r18
 446:	b3 07       	cpc	r27, r19
 448:	e4 07       	cpc	r30, r20
 44a:	f5 07       	cpc	r31, r21
 44c:	20 f0       	brcs	.+8      	; 0x456 <__udivmodsi4_ep>
 44e:	a2 1b       	sub	r26, r18
 450:	b3 0b       	sbc	r27, r19
 452:	e4 0b       	sbc	r30, r20
 454:	f5 0b       	sbc	r31, r21

00000456 <__udivmodsi4_ep>:
 456:	66 1f       	adc	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	1a 94       	dec	r1
 460:	69 f7       	brne	.-38     	; 0x43c <__udivmodsi4_loop>
 462:	60 95       	com	r22
 464:	70 95       	com	r23
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	9b 01       	movw	r18, r22
 46c:	ac 01       	movw	r20, r24
 46e:	bd 01       	movw	r22, r26
 470:	cf 01       	movw	r24, r30
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
